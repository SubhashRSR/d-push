<?php
bolt_decrypt( __FILE__ , 'UevUcHJq'); return 0;
##!!!##